package chapter1;

/**
 * 아이템 1 : 생성자 대신 정적 팩토리 메서드를 고려하라
 */
public class Item1 {
    /**
     * [핵심정리]
     * 정적 팩토리 메서드와 public 생성자는 각자의 쓰임새가 있으니 상대적인 장단점을 이해하고 사용하는 것이 좋다.
     * 그렇다고 하더라도 정적팩토리를 사용하는게 유리한 경우가 많아지므로 무작정 public 생성자를 제공하던 습관이 있다면 고치자.
     */

    /**
     * 클라이언트가 클래스의 인스턴스를 얻는 전통적인 수단은 public 생성자
     * + 클래스는 생성자와 별도로 정적 팩토리 메서드를 제공 -> 그 클래스의 인스턴스 타입을 반환하는 단순한 정적 메서드
     */

    //예시1
    public static Boolean valueOf(boolean b){
        return b ? Boolean.TRUE : Boolean.FALSE;
    }

    /**
     * 정적 팩토리 메서드가 생성자 보다 좋은 장점 다섯가지
     * 1. 이름을 가질 수 있다.
     *      ex) 생성자 : BigInteger(int, int, Random) vs 정적 팩토리 메서드 BigInteger.probablePrime
     *      '값이 소수인 BigInteger를 반환한다'의 의미를 더 잘 설명하는 것은?
     *      한 클래스에 시그니처가 같은 생성자가 여러 개 필요할 것 같으면, 생성자를 정적 패터리 메서드로 바꾸고 각각의 차이를 잘 드러내는 이름을 지어주자
     *
     * 2. 호출될 때마다 인스턴스를 새로 생성하지는 않아도 된다.
     *      반복되는 요청에 같은 객체를 반환하는 식으로 정적 팩토리 방식의 클래스는 언제 어느 인스턴스를 살아있게 할지를 철저히 통제할 수 있다.
     *
     * 3. 반환 타입의 하위 타입 객체를 반환할 수 있는 능력이 있다.
     *
     *
     * 4. 입력 매개변수에 따라 매번 다른 클래스의 객체를 반환할 수 있다.
     *
     * 5. 정적 팩토리 메서드를 작성하는 시점에는 반환할 객체의 클래스가 존재하지 않아도 된다.
     *
     */

    /**
     * 단점
     * 1. 상속을 하려면 public이나 protect 생성자가 필요하니 정적 팩토리 메서드만 제공하면 하위 클래스를 만들 수 없다.
     *
     * 2. 정적 팩토리 메서드는 프로그래머가 찾기 어렵다.
     *      생성자처럼 API 설명에 명확히 드러나지 않으니 사용자는 정적 팩토리 메서드 방식 클래스를 인스턴스화할 방법을 알아내야 한다.
     */


}
