# 8장 메서드
- 메서드를 설계할 때 주의할 점들을 살펴본다.
    - 매개변수와 반환값을 어떻게 처리해야 하는지
    - 메서드 시그니처는 어떻게 설계해야 하는지
    - 문서화는 어떻게 해야 하는지를 다룬다.
    - 상당부분은 메서드뿐만 아니라 생성자에도 적용된다.
    - 4장과 동일하게 사용성,견고성, 유연성에 집중한다.
    
---
### Item49. 매개변수가 유효한지 검사하라
- 핵심정리
    - 작성 시 그 매개변수드레 어떤 제약이 있을지 생각해야 한다.   
      그 제약들을 문서화하고 메서드 코드 시작 부분에서 명시적으로 검사해야한다.   
      이러한 습관을 반드시 기르도록 하자. 이 노력이 유효성 검사가 실제 오류를 처음 걸러낼 때 충분히 보상받을 것이다.

---
### Item50. 적시에 방어적 복사본을 만들어라
- 핵심정리
    - 클래스가 클라이언트로부터 받는 혹은 클라이언트로 반환하는 구성요소가 가변이라면   
      그 요소는 반드시 방어적으로 복사해야 한다. 복사 비용이 너무 크거나 클라이언트가 그 요소를 잘못 수정할 일이 없음을 신뢰한다면
      방어적 복사를 수행하는 대신 해당 구성요소를 수정햇을 때의 책임이 클라이언트에 있음을 문서에 명시하도록 하자.
    
---
### Item51. 메서드 시그니처를 신중히 설계하라
- 핵심정리
    - 

---
### Item52. 다중정의는 신중히 사용하라
- 핵심정리
    - 일반적으로 매개변수 수가 같을 때는 다중정의를 피하는 것이 좋다.   
      상활에 따라, 특히 생성자라면 이 조언을 따르기가 불가능할 수 있다.      
      그럴 때는 헷갈릴만한 매개변수는 형변환하여 정확한 다중정의 메서드가 선택되도록 해야한다.
      이것이 불가능하면, 예컨대 기존 클래스를 수정해 새로운 인터페이스를 구현해야 할 때는 
      같은 객체를 입력받는 다중 정의 메서드들이 모두 동일하게 동작하도록 만들어야 한다.
      그렇지 못하면 프로그래머들은 다중정의된 메서드나 생성자를 효과적으로 사용하지 못할 것이고,
      의도대로 동작하지 않는 이유를 이해하지도 못할 것이다.
    
---
### Item53. 가변인수는 신중히 사용하라
- 핵심정리
    - 인수 갯수가 일정하지 않은 메서드를 정의해야 한다면 가변인수가 반드시 필요하다. 메서드를 정의할 때
      필수 매개변수는 가변인수 앞에 두고, 가변인수를 사용할 때는 성능 문제까지 고려하자.
    
---
### Item54. null이 아닌, 빈 컬렉션이나 배열을 반환하라
- 핵심정리
    - null이 아닌, 빈 배열이나 컬렉셔을 반환하라. null을 반환하는 API는 사용하기 어렵고 오류처리코드도 늘어난다. 그렇다고 성능이 좋은 것도 아니다.
    
---
### Item55. 옵셔널 반환은 신중히 하라
- 핵심정리
    - 값을 반환하지 못할 가능성이 있고, 호출할 때마다 반환값이 없을 가능성을 염두에 둬야하는 메서드라면 옵셔널을 반환해야 할 상황일 수 있다. 
      하지만 옵셔널 반환에는 성능 저하가 뒤따르니, 성능에 민감한 메서드라면 null을 반환하거나 예외를 던지는 편이 나을 수 있다.
      그리고 옵셔널을 반환값 이외의 용도로 쓰는 경우는 매우 드물다.  
    
---
### Item56. 공개된 API 요소에는 항상 문서화 주석을 작성하라
- 핵심정리
    - 문서화 주석은 여러분 API를 문서화하는 가장 훌륭하고 효과적인 방법이다. 공개 API라면 빠짐없이 설명을 달아야 한다.
      표준규약을 일관되게 지키자. 문서화 주석에 임의의 HTML 태그를 사용할 수 있음을 기억하라. 단 HTML 메타문자는 특별하게 취급해야 한다.
